.SUFFIXES: .cpp .hpp

# Programs
SHELL 	= bash
CC     	= g++
LD	= ld
RM 	= rm
RM1     = rm -r
ECHO	= /bin/echo
CAT	= cat
PRINTF	= printf
SED	= sed
DOXYGEN = doxygen
TASK1    = tar -zxvf $(ESRCDIR)/Box2D.tgz -C $(ESRCDIR) && cd $(EBSRCDIR) && mkdir build251 && cd ./build251
TASK2    = cmake ../ && make && make install
TASK3    = cd ../../../../

######################################
# Project Name (generate executable with this name)
TARGET = cs251_exe_26

# Project Paths
PROJECT_ROOT=./
EXTERNAL_ROOT=$(PROJECT_ROOT)/external
ESRCDIR = $(EXTERNAL_ROOT)/src
ELIBDIR = $(EXTERNAL_ROOT)/lib
EINCDIR = $(EXTERNAL_ROOT)/include
EBSRCDIR = $(ESRCDIR)/Box2D
SRCDIR = $(PROJECT_ROOT)/src
OBJDIR = $(PROJECT_ROOT)/myobjs
BINDIR = $(PROJECT_ROOT)/mybins
LIBDIR = $(PROJECT_ROOT)/mylibs

# Library Paths
BOX2D_ROOT=$(EXTERNAL_ROOT)
GLUI_ROOT=/usr
GL_ROOT=/usr/include/

#Libraries
LIBS = -lBox2D -lglui -lglut -lGLU -lGL

# Compiler and Linker flags
CPPFLAGS =-g -O3 -Wall -fno-strict-aliasing
CPPFLAGS+=-I $(BOX2D_ROOT)/include -I $(GLUI_ROOT)/include
LDFLAGS+=-L $(BOX2D_ROOT)/lib -L $(GLUI_ROOT)/lib 

######################################

NO_COLOR=\e[0m
OK_COLOR=\e[1;32m
ERR_COLOR=\e[1;31m
WARN_COLOR=\e[1;33m
MESG_COLOR=\e[1;34m
FILE_COLOR=\e[1;37m

OK_STRING="[OK]"
ERR_STRING="[ERRORS]"
WARN_STRING="[WARNINGS]"
OK_FMT="${OK_COLOR}%30s\n${NO_COLOR}"
ERR_FMT="${ERR_COLOR}%30s\n${NO_COLOR}"
WARN_FMT="${WARN_COLOR}%30s\n${NO_COLOR}"
######################################

SRCS := $(wildcard $(SRCDIR)/*.cpp)
INCS := $(wildcard $(SRCDIR)/*.hpp)
OBJS := $(SRCS:$(SRCDIR)/%.cpp=$(OBJDIR)/%.o)
STATIC_LIB = "FALSE"
DEFPATH = 0


.PHONY: all setup doc clean distclean

all: setup check

check:
	@if test -d $(ELIBDIR)/Box2D && test -d $(EINCDIR)/Box2D && test -e $(ELIBDIR)/libBox2D.a; \
	then $(ECHO) "INSTALLED"; \
	elif test -d $(ESRCDIR)/Box2D; \
	then $(ECHO) "NOT INSTALLED... INSTALLING" &&\
	$(RM1) $(ESRCDIR)/Box2D && \
	$(TASK1) && $(TASK2) && $(TASK3); \
	else $(ECHO) "NOT INSTALLED... INSTALLING" &&\
	$(TASK1) && $(TASK2) && $(TASK3); \
	fi;

setup:
	@mkdir -p myobjs
	@mkdir -p mybins
	@mkdir -p mylibs

executable: makobj
	@$(PRINTF) "$(MESG_COLOR)Building executable:$(NO_COLOR) $(FILE_COLOR) %16s$(NO_COLOR)" "$(notdir $@)"
	@$(CC) -o $(BINDIR)/$(TARGET) $(LDFLAGS) $(OBJS) $(LIBS) 2> temp.log || touch temp.err
	@if test -e temp.err; \
	then $(PRINTF) $(ERR_FMT) $(ERR_STRING) && $(CAT) temp.log; \
	elif test -s temp.log; \
	then $(PRINTF) $(WARN_FMT) $(WARN_STRING) && $(CAT) temp.log; \
	else $(PRINTF) $(OK_FMT) $(OK_STRING); \
	fi;
	@$(RM) -f temp.log temp.err

-include -include $(OBJS:.o=.d)

makobj: $(OBJS)

$(OBJS): $(OBJDIR)/%.o : $(SRCDIR)/%.cpp
	@$(PRINTF) "$(MESG_COLOR)Compiling: $(NO_COLOR) $(FILE_COLOR) %25s$(NO_COLOR)" "$(notdir $<)"
	@$(CC) $(CPPFLAGS) -c $< -o $@ -MD 2> temp.log || touch temp.err
	@if test -e temp.err; \
	then $(PRINTF) $(ERR_FMT) $(ERR_STRING) && $(CAT) temp.log; \
	elif test -s temp.log; \
	then $(PRINTF) $(WARN_FMT) $(WARN_STRING) && $(CAT) temp.log; \
	else printf "${OK_COLOR}%30s\n${NO_COLOR}" "[OK]"; \
	fi;
	@$(RM) -f temp.log temp.err
	@cd $(OBJDIR) && $(RM) *.d && cd ..

doc:
	@$(ECHO) -n "Generating Beamer Presentation...   "
	@$ pdflatex main.tex 2> /dev/null > /dev/null
	@$ bibtex main 2> /dev/null > /dev/null
	@$ pdflatex main.tex 2> /dev/null > /dev/null
	@$ pdflatex main.tex 2> /dev/null > /dev/null
	@$ rm *.aux *.bbl *.blg *.log *.nav *.out *.snm *.toc
	@$(RM) -rf doc/html
	@$(ECHO) "Done"

mstat: makobj
	@if [ $(STATIC_LIB) == TRUE ]; \
	then cd $(OBJDIR) &&\
	ar -cvq ../mylibs/libCS251.a callbacks.o render.o dominos.o cs251_base.o && \
	cd ..; \
	fi;  

mshare: makobj
	@if [ $(STATIC_LIB) != TRUE ]; \
	then cd $(SRCDIR) &&\
	cp callbacks.cpp ../callbacks.cpp && cp callbacks.hpp ../callbacks.hpp &&\
	cp cs251_base.cpp ../cs251_base.cpp && cp cs251_base.hpp ../cs251_base.hpp &&\
	cp render.cpp ../render.cpp && cp render.hpp ../render.hpp &&\
	cp dominos.cpp ../dominos.cpp && cp dominos.hpp ../dominos.hpp &&\
	cd .. &&\
	gcc $(CPPFLAGS) -c -Wall -Werror -fPIC *.cpp && \
	gcc -shared -o ./mylibs/libCS251.so *.o && rm *.o *.cpp *.hpp ;\
	fi;

exelib: mstat mshare
	@if [ $(STATIC_LIB) == TRUE ]; \
	then cd $(OBJDIR) && cp main.o ../main.o && cd .. &&\
	$(ECHO) "USING STATIC" &&\
	gcc main.o -Wl,-Bstatic -L./mylibs -lCS251 -Wl,-Bdynamic $(LDFLAGS) $(LIBS) -o ./mybins/cs251_exelib_26 && \
	rm main.o ; \
	else cd $(OBJDIR) && cp main.o ../main.o && cd .. &&\
	$(ECHO) "USING SHARED" && \
	gcc main.o -L./mylibs -Wl,-rpath=$(shell pwd)/mylibs -lCS251 -Wl,-Bdynamic $(LDFLAGS) $(LIBS) -o ./mybins/cs251_exelib_26 &&\
	rm main.o; \
	fi;

clean:
	@$(ECHO) -n "Cleaning up..." 
	@$(RM) -rf $(BINDIR) $(LIBDIR) $(OBJDIR)
	@mkdir $(BINDIR) $(LIBDIR) $(OBJDIR)  
	@$(RM) -rf *~ $(DEPS) $(SRCDIR)/*~
	@$(ECHO) "Done"

distclean: clean
	@$(RM) -rf $(BINDIR) $(LIBDIR) $(OBJDIR) $(DOCDIR)/html
	@cd $(ESRCDIR) && $(RM1) Box2D && \
	cd ../.. && cd $(ELIBDIR) && $(RM1) Box2D && $(RM) libBox2D.a && \
	cd ../.. && cd $(EINCDIR) && $(RM1) Box2D && \
	cd ../..  
